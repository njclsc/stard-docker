docker重要概念：
1：镜像
2：容器
3：仓库
4：容器数据卷

docker compose简介
dockerfile， build， run 手动操作单个容器
一旦有100个服务，依赖关系怎么办
所以 使用docker compose来搞笑管理容器，定义运行多个容器

步骤：
	1:dockerfile 保证我们的项目在任何地方都可以运行
	2：docker-compose.yml编写这个文件
	3：启动项目

作用：
	批量容器编排

compose:
	dockerfile 让程序在任何地方运行【第一步】
	docker-compose.yml内容如下：【第二步】
===========================================
version: "3.9"  # optional since v1.27.0
services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/code
      - logvolume01:/var/log
    links:
      - redis
  redis:
    image: redis
volumes:
  logvolume01: {}
===========================================
docker-compose up 100 个服务，前提是docker-compos.yml中要有这100个服务的
相关配置。doc
compose只要概念：
1：服务【一个个的小容器】
2：项目.[一组关联的容器]


安装compose

1:下载：
官网镜像
curl -L "https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

国内镜像
curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose

下载完毕后 给安装文件授权
chmod 777 docker-compose
执行如下命令表示安装成功
[root@localhost bin]# docker-compose version
docker-compose version 1.24.0, build 0aa59064
docker-py version: 3.7.2
CPython version: 3.6.8
OpenSSL version: OpenSSL 1.1.0j  20 Nov 2018


2：体验
创建一个项目文件夹
 mkdir composetest
进入文件夹
 cd composetest
在项目文件夹中创建一个app.py，文件内容如下：
--------------------------------
import time

import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)

--------------------------------
3：在项目文件夹中创建一个requirements.txt,内容：
flask
redis
4：创建dockerfile文件。内容：
--------------------------------
FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]
--------------------------------

5：创建一个docker-compose.yml文件，内容如下：
--------------------------------
version: "3.9"
services:
  web:
    build: .
    ports:
      - "5000:5000"
  redis:
    image: "redis:alpine"
--------------------------------

6:编译运行compose
--------------------------------
docker-compose up
--------------------------------
停止docker-compose
docker-compose stop


流程：
1：创建网络
2：执行docker-compose.yml文件
3:启动服务
